package com.example.ShopAnime.util;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;

@Component
public class JWTUtils {

    @Value("${jwt.secret}")
    private String secretKey;

    @Value("${jwt.expirationMs}")
    private long expirationMs;

    // T·∫°o key t·ª´ chu·ªói b√≠ m·∫≠t
    private Key getSigningKey() {
        return Keys.hmacShaKeyFor(secretKey.getBytes());
    }

    // üîπ T·∫°o JWT t·ª´ username
    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username) // g·∫Øn username v√†o token
                .setIssuedAt(new Date()) // th·ªùi gian t·∫°o token
                .setExpiration(new Date(System.currentTimeMillis() + expirationMs)) // th·ªùi gian h·∫øt h·∫°n
                .signWith(getSigningKey(), SignatureAlgorithm.HS256) // k√Ω b·∫±ng thu·∫≠t to√°n HS256
                .compact(); // g·ªôp l·∫°i th√†nh chu·ªói JWT
    }

    // üîπ Tr√≠ch xu·∫•t username t·ª´ token
    public String extractUsername(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token) // gi·∫£i m√£ token
                .getBody()
                .getSubject(); // l·∫•y username
    }

    // üîπ Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
    public boolean validateToken(String token) {
        try {
            Jws<Claims> claims = Jwts.parserBuilder()
                    .setSigningKey(getSigningKey())
                    .build()
                    .parseClaimsJws(token);

            // Ki·ªÉm tra token h·∫øt h·∫°n ch∆∞a
            Date expiration = claims.getBody().getExpiration();
            return !expiration.before(new Date());

        } catch (ExpiredJwtException e) {
            System.out.println("‚ùå Token ƒë√£ h·∫øt h·∫°n!");
        } catch (UnsupportedJwtException e) {
            System.out.println("‚ùå Token kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!");
        } catch (MalformedJwtException e) {
            System.out.println("‚ùå Token b·ªã sai c·∫•u tr√∫c!");
        } catch (SecurityException e) {
            System.out.println("‚ùå Ch·ªØ k√Ω token kh√¥ng h·ª£p l·ªá!");
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Token r·ªóng ho·∫∑c l·ªói kh√°c!");
        }
        return false;
    }
}
